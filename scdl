#!/bin/bash
# Author: FlyinGrub
# Check my github : https://github.com/flyingrub
# Share it if you like ;)
##############################################################

echo ''
echo ' *---------------------------------------------------------------------------*'
echo '|               SoundcloudMusicDownloader           |   FlyinGrub rework      |'
echo ' *---------------------------------------------------------------------------*'

function CURL(){
    curl -s --user-agent 'Mozilla/5.0' "$1"
}

function config() {
    if [ -f "/$HOME/.scdl.cfg" ]; then
        source "/$HOME/.scdl.cfg"
        if [ "$continue" = "true" ]; then
            cont=continue
        else
            cont=exit
        fi
        cd "$pathtomusic"
        echo "[i] Path where i will download music : $pathtomusic"
        echo "[i] I will $cont if i found a file that already exist"
    else
        echo '[i] The config file do not exist...'
        echo '[i] Please run the Installer first or add The sample config file'
        exit
    fi

    [ "$continue" = "true" ] && cont=":"
}

function settags() {
    local artist=$1
    local title=$2
    local filename=$3
    local genre=$4
    local imageurl=$5
    local album=$6

    curl -s -L --user-agent 'Mozilla/5.0' "$imageurl" -o "/tmp/1.jpg"

    if [ "$writags" = "1" ] ; then
        eyeD3 --remove-all "$filename" &>/dev/null
        eyeD3 --add-image="/tmp/1.jpg:ILLUSTRATION" \
            --add-image="/tmp/1.jpg:OTHER" \
            --add-image="/tmp/1.jpg:MEDIA" \
            --add-image="/tmp/1.jpg:ICON" \
            --add-image="/tmp/1.jpg:MEDIA" \
            --add-image="/tmp/1.jpg:OTHER_ICON" \
            --add-image="/tmp/1.jpg:FRONT_COVER" \
            --artist="$artist" --year=$(date +%Y) --genre="$genre" \
            --title="$title" --album="$album" --v2 "$filename" &>/dev/null

        echo '[i] Setting tags finished!'
    else
        echo "[i] Setting tags skipped (please install eyeD3)"
    fi
}

function downsong() {
    url="$1"
    echo "[i] Grabbing artists page"
    page=$(CURL $url)
    clientID=$(echo "$page" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    songID=$(echo "$page" | grep -v "small" | grep -oE "data-sc-track=.[0-9]*" | grep -oE "[0-9].*" | sort | uniq)
    fromjsontomp3 "$songID" "$clientID"

}

function fromjsontomp3 {
    clientID="$2"
    songID="$1"
    songinfo=$(CURL "http://api.soundcloud.com/tracks/$songID.json?client_id=$clientID" | tr "," "\n")
    title=$(echo -ne "$songinfo" | grep '"title"' | cut -c 10- | rev | cut -c 2- | rev | tr '*/\?"<>|.' '+        ' )
    filename=$(echo -ne "$title".mp3)
    songurl=$(echo -e "$songinfo" | grep "stream_url" | cut -d '"' -f 4)
    realsongurl=$(echo -e "$songurl?client_id=$clientID")
    artist=$(echo -e "$songinfo" | grep "username" | cut -d '"' -f 4)
    imageurl=$(echo -e "$songinfo" | grep "artwork_url" | cut -d '"' -f 4 | sed 's/large/t500x500/g')
    genre=$(echo -e "$songinfo" | grep "genre" | cut -d '"' -f 4)

    if [ -e "$filename" ]; then
        echo "[!] The song $filename has already been downloaded..."  && $cont
    else
        echo "[-] Downloading $title..."
        curl -# -L --user-agent 'Mozilla/5.0' -o "`echo -e "$filename"`" "$realsongurl"
        settags "$artist" "$title" "$filename" "$genre" "$imageurl"
        echo -e "[i] Downloading of $filename finished"
    fi
}

function downlike()  {
    echo "[i] Grabbing artist's likes page"
    artistnm=$(echo "$1" | cut -d '/' -f 4)
    likeurl=$(echo "http://soundcloud.com/$artistnm")
    page=$(CURL $likeurl)

    clientID=$(echo "$page" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    artistID=$(CURL "http://api.soundcloud.com/resolve.json?url=$likeurl&client_id=$clientID" | grep -oE "([0-9])+\." | tr -d ".")

    offset=0
    likepage=$(CURL "http://api.soundcloud.com/users/$artistID/favorites.json?client_id=$clientID&limit=1&offset=$offset")
    echo "http://api.soundcloud.com/users/$artistID/favorites.json?client_id=$clientID&limit=1&offset=$offset"
    while [[ $(echo "$likepage" | grep 'id') != '' ]]
    do
        ((offset++))
        setsongID=$(echo "$likepage" | tr "," "\n" | grep '"uri"' | grep 'tracks' | cut -d '"' -f 4 | cut -d '/' -f 5)
        echo ""
        echo "[i] Song liked n°$offset by $artistnm"
        fromjsontomp3 "$setsongID" "$clientID"
        likepage=$(CURL "http://api.soundcloud.com/users/$artistID/favorites.json?client_id=$clientID&limit=1&offset=$offset")
    done
    echo ""
    echo "[i] There was $offset songs."
}

function downset() {
    echo "[i] Grabbing set page"
    url="$1"
    setpage=$(CURL $url)

    clientID=$(echo "$setpage" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    playlistID=$(echo -e "$setpage" | grep 'data-sc-playlist-id' | sed -n '1p'| cut -d '"' -f 4)

    setOffset=0
    setpage=$(CURL "https://api.soundcloud.com/playlists/$playlistID.json?limit=1&offset=$setOffset&client_id=$clientID")
    setTitle=$(echo "$setpage" | tr "{" "\n" | grep '"playlist"' | tr "," "\n" | grep '"title"' | cut -d '"' -f 4)
    trackExist=$(echo "$setpage" | tr "," "\n" | grep '"tracks"' | cut -d ':' -f 2)
    echo "https://api.soundcloud.com/playlists/$playlistID.json?limit=1&offset=$setOffset&client_id=$clientID"
    while [[ "$trackExist" != '[]' && "$trackExist" != '' ]]
    do
        ((setOffset++))
        setsongID=$(echo "$setpage" | tr "," "\n" | grep '"uri"' | grep 'tracks' | cut -d '"' -f 4 | cut -d '/' -f 5)
        echo ""
        echo "[i] Song n°$setOffset from the Set : $setTitle"
        fromjsontomp3 "$setsongID" "$clientID"
        setpage=$(CURL "https://api.soundcloud.com/playlists/$playlistID.json?limit=1&offset=$setOffset&client_id=$clientID")
        trackExist=$(echo "$setpage" | tr "," "\n" | grep '"tracks"' | cut -d ':' -f 2)
    done
    echo ""
    echo "[i] There was $setOffset songs in the set $setTitle."
}

function downallsongs() {
    url="$1"
    echo "[i] Grabbing artists page"
    page=$(CURL $url)
    clientID=$(echo "$page" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    artistID=$(CURL "http://api.soundcloud.com/resolve.json?url=$url&client_id=$clientID" | grep -oE "([0-9])+\." | tr -d ".")
    echo ""
    offset=0
    artistpage=$(CURL "https://api.sndcdn.com/e1/users/$artistID/sounds.json?limit=1&offset=$offset&client_id=$clientID")
    while [[ $(echo "$artistpage" | grep 'id') != '' ]]
    do
        ((offset++))
        playlist=$(echo "$artistpage" | tr "," "\n" | grep '"playlist"' | cut -c 14-)
        
        if [[ "$playlist" != "null" ]]; then
            echo "[i] The n°$offset is a playlist"
            thisset=$(echo "$artistpage" | tr "," "\n" | grep '"permalink_url"' | sed -n 1p | cut -d '"' -f 4)
            downset "$thisset"
        else
            echo ""
            echo "[i] Song n°$offset"
            typesong=$(echo "$artistpage" | tr "," "\n" | grep '"type"' | cut -d '"' -f 4)
            if [[ "$typesong" == "track" ]] && [[ "$onlyrepost" == "0" ]] ; then
                artistsongurl=$(echo "$artistpage" | tr "," "\n" | grep 'permalink_url' | sed '1d' | cut -d '"' -f 4)
                downsong "$artistsongurl"
            elif [[ "$typesong" == "playlist" ]] && [[ "$onlyrepost" == "0" ]]; then
                artistsongurl=$(echo "$artistpage" | tr "," "\n" | grep 'permalink_url' | cut -d '"' -f 4)
                downset "$artistsongurl"
            elif [[ "$typesong" == "playlist_repost" ]]; then
                artistsongurl=$(echo "$artistpage" | tr "," "\n" | grep 'permalink_url' | cut -d '"' -f 4)
                downset "$artistsongurl"
            elif [[ "$typesong" == "track_repost" ]]; then
                artistsongurl=$(echo "$artistpage" | tr "," "\n" | grep 'permalink_url' | sed '1d' | cut -d '"' -f 4)
                downsong "$artistsongurl"
            fi            
        fi
        artistpage=$(CURL "https://api.sndcdn.com/e1/users/$artistID/sounds.json?limit=1&offset=$offset&client_id=$clientID")
    done
    echo ""
    echo "[i] There was $offset songs/sets."
}

function downallsets() {
    artistnm=$(echo "$1" | cut -d '/' -f 4)
    seturl=$(echo "http://soundcloud.com/$artistnm")
    echo "[i] Grabbing artist's set page"
    page=$(CURL $seturl)
    clientID=$(echo "$page" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    artistID=$(CURL "http://api.soundcloud.com/resolve.json?url=$seturl&client_id=$clientID" | grep -oE "([0-9])+\." | tr -d ".")

    all_offset=0
    allsetpage=$(CURL "https://api.soundcloud.com/users/$artistID/playlists.json?limit=1&offset=$all_offset&client_id=$clientID")
    echo "https://api.soundcloud.com/users/$artistID/playlists.json?limit=1&offset=$all_offset&client_id=$clientID"
    while [[ $(echo "$allsetpage" | grep 'id') != '' ]]
    do
        ((all_offset++))
        thisset=$(echo "$allsetpage" | tr "," "\n" | grep '"permalink_url"'  | sed -n 1p | cut -d '"' -f 4) 
        echo ""
        echo "[i] Set n°$all_offset from $artistnm"
        downset "$thisset"
        echo "[i] Set n°$all_offset from $artistnm downloaded"
        allsetpage=$(CURL "https://api.soundcloud.com/users/$artistID/playlists.json?limit=1&offset=$all_offset&client_id=$clientID")
    done
    echo ""
    echo "[i] There was $all_offset sets."

}

function downgroup() {
    groupurl="$1"
    echo "[i] Grabbing group page"
    groupage=$(CURL "$groupurl")
    groupid=$(echo "$groupage" | grep "html5-code-groups" | tr " " "\n" | grep "html5-code-groups-" | cut -d '"' -f 2 | sed '2d' | cut -d '-' -f 4)
    clientID=$(echo "$groupage" | grep "clientID" | tr "," "\n" | grep "clientID" | cut -d '"' -f 4)
    trackspage=$(CURL "http://api.soundcloud.com/groups/$groupid/tracks.json?client_id=$clientID" | tr "}" "\n")
    trackspage=$(echo "$trackspage" | tr "," "\n" | grep 'permalink_url' | sed '1d' | sed -n '1~2p')
    songcount=$(echo "$trackspage" | wc -l)
    echo "[i] Found $songcount songs!"
    for (( i=1; i <= $songcount; i++ ))
    do
        echo -e "\n---------- Downloading Song n°$i ----------"
        thisongurl=$(echo "$trackspage" | sed -n "$i"p | cut -d '"' -f 4)
        downsong "$thisongurl"
        echo "----- Downloading Song n°$i finished ------"
    done
}

function show_help() {
    echo ""
    echo "[i] Usage: `basename $0` [url]"
    echo "    With url like :"
    echo "        http://soundcloud.com/user (Download all of one user's songs)"
    echo "        http://soundcloud.com/user/song-name (Download one single song)"
    echo "        http://soundcloud.com/user/sets (Download all of one user's sets)"
    echo "        http://soundcloud.com/user/sets/set-name (Download one single set)"
    echo ""
    echo "   Downloaded file names like : "title.mp3""
    echo ""
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_help
    exit 1
fi
if [[ "$#" != 1 ]] && [ "$#" != 2 ]; then
    echo "[!] Illegal number of parameters"
    show_help
    exit 1
fi

clientID="b45b1aa10f1ac2941910a7f0d10f8e28"
writags=1

command -v curl &>/dev/null || { echo "[!] cURL needs to be installed in order to run the script."; echo "[!] The script will exit..."; exit 1; }
command -v eyeD3 &>/dev/null || { echo "[!] eyeD3 needs to be installed to write tags into mp3 file."; echo "[!] The script will skip this part..."; writags=0; }
echo "[i] Using" `curl -V` | cut -c-21


soundurl=$(echo "$1" | sed 's-.*soundcloud.com/-http://soundcloud.com/-' | cut -d "?" -f 1 | grep 'soundcloud.com')

echo "[i] Using URL $soundurl"
config

d1="$(echo "$soundurl" | cut -d "/" -f 4)"
d2="$(echo "$soundurl" | cut -d "/" -f 5)"
d3="$(echo "$soundurl" | cut -d "/" -f 6)"

if [[ "$d1" == "" ]] ; then
    echo "[!] Bad URL!"
    show_help
    exit 1
elif [[ "$d1" == "groups" ]] ; then
    echo "[i] Detected download type : All song of the group"
    downgroup "$soundurl"
elif [[ "$d2" == "likes" ]] ; then
    echo "[i] Detected download type : All of one user's like"
    downlike "$soundurl"
elif [[ "$d2" == "" ]] ; then
    echo "[i] Detected download type : All of one user's songs"
    onlyrepost=0
    [[ "$2" = "--onlyrepost" ]] && onlyrepost=1 && echo '[i] Only the repost will be downloaded'
    downallsongs "$soundurl"
elif [[ "$d2" == "sets" ]] && [[ "$d3" == "" ]] ; then
    echo "[i] Detected download type : All of one user's sets"
    downallsets "$soundurl"
elif [[ "$d2" == "sets" ]] ; then
    echo "[i] Detected download type : One single set"
    downset "$soundurl"
else
    echo "[i] Detected download type : One single song"
    downsong "$soundurl"
fi
